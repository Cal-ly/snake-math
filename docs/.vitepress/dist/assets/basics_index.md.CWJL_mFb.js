import{_ as e,C as n,c as l,o,j as a,G as r,ag as h,a as s}from"./chunks/framework.CaBSUjbE.js";const E=JSON.parse('{"title":"Mathematical Foundations","description":"","frontmatter":{},"headers":[],"relativePath":"basics/index.md","filePath":"basics/index.md"}'),p={name:"basics/index.md"};function c(d,i,k,m,u,g){const t=n("PyScriptDemo");return o(),l("div",null,[i[0]||(i[0]=a("h1",{id:"mathematical-foundations",tabindex:"-1"},[s("Mathematical Foundations "),a("a",{class:"header-anchor",href:"#mathematical-foundations","aria-label":'Permalink to "Mathematical Foundations"'},"​")],-1)),i[1]||(i[1]=a("h2",{id:"pyscript-integration-demo",tabindex:"-1"},[s("PyScript Integration Demo "),a("a",{class:"header-anchor",href:"#pyscript-integration-demo","aria-label":'Permalink to "PyScript Integration Demo"'},"​")],-1)),i[2]||(i[2]=a("p",null,"This page demonstrates interactive Python mathematics running directly in your browser using PyScript 2025.5.1.",-1)),r(t),i[3]||(i[3]=h(`<h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>The interactive demo above shows:</p><ol><li><strong>Basic PyScript functionality</strong> - Python running in the browser</li><li><strong>Mathematical computations</strong> - Using Python&#39;s <code>math</code> module</li><li><strong>Interactive input handling</strong> - Real-time calculations</li><li><strong>JavaScript integration</strong> - Seamless DOM manipulation</li></ol><h2 id="mathematical-concepts" tabindex="-1">Mathematical Concepts <a class="header-anchor" href="#mathematical-concepts" aria-label="Permalink to &quot;Mathematical Concepts&quot;">​</a></h2><h3 id="variables-and-expressions" tabindex="-1">Variables and Expressions <a class="header-anchor" href="#variables-and-expressions" aria-label="Permalink to &quot;Variables and Expressions&quot;">​</a></h3><p>In mathematics, we write: <em>y = 2x + 1</em></p><p>In Python, this becomes a simple function that we can evaluate for any value of x:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linear_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Example usage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> linear_function(x)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;When x = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, y = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="real-time-calculations" tabindex="-1">Real-time Calculations <a class="header-anchor" href="#real-time-calculations" aria-label="Permalink to &quot;Real-time Calculations&quot;">​</a></h3><p>The slider above demonstrates how mathematical functions can be visualized interactively. As you change the input value, the output updates immediately, showing the relationship between variables.</p><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>With PyScript working, we can now build more complex examples:</p><ul><li><strong>Quadratic function plotter</strong> with matplotlib</li><li><strong>Trigonometric visualizations</strong></li><li><strong>Calculus demonstrations</strong> (limits, derivatives)</li><li><strong>Linear algebra operations</strong> (matrices, transformations)</li><li><strong>Statistical analysis</strong> with data visualization</li></ul><h2 id="technical-notes" tabindex="-1">Technical Notes <a class="header-anchor" href="#technical-notes" aria-label="Permalink to &quot;Technical Notes&quot;">​</a></h2><p>This implementation:</p><ul><li>✅ Works with VitePress build system</li><li>✅ Integrates PyScript 2025.5.1 with Vue 3</li><li>✅ Provides real-time interactive math</li><li>✅ Maintains clean separation between Python and JavaScript</li><li>✅ Supports complex mathematical computations</li></ul>`,16))])}const b=e(p,[["render",c]]);export{E as __pageData,b as default};
